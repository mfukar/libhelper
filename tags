!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARRAY_SIZE	.\libhelper\utils.h	4;"	d
DLIST_HEAD	.\libhelper\dlist.h	22;"	d
DLIST_HEAD_INIT	.\libhelper\dlist.h	21;"	d
LEFT	.\libhelper\rbtree.c	3;"	d	file:
PCH_H	.\ac-benchmark\pch.h	10;"	d
RIGHT	.\libhelper\rbtree.c	4;"	d	file:
TEST_CLASS	.\libhelper-unit-tests\unittest1.cpp	/^    TEST_CLASS (UnitTest1) {$/;"	f	namespace:libhelperunittests
WIN32_LEAN_AND_MEAN	.\libhelper\stdafx.h	5;"	d
WITH_FILE	.\libhelper\preprocessor.h	33;"	d
WITH_MALLOC	.\libhelper\preprocessor.h	54;"	d
_INVALID_RB_TREE	.\libhelper\rbtree.c	43;"	d	file:
_INVALID_RB_TREE	.\libhelper\rbtree.c	81;"	d	file:
_dlist_delete	.\libhelper\dlist.h	/^static inline void _dlist_delete(struct dlist *prev, struct dlist *next) {$/;"	f
_dlist_insert	.\libhelper\dlist.h	/^static inline void _dlist_insert(struct dlist *elem, struct dlist *prev, struct dlist *next) {$/;"	f
_rb_size	.\libhelper\rbtree.c	/^void _rb_size (struct rb_node *root, size_t *size) {$/;"	f
ac_6c7055133686455382b48f901be5abc6	.\libhelper\aho-corasick.h	2;"	d
ac_build_failure_function	.\libhelper\aho-corasick.c	/^bool ac_build_failure_function (struct ac_trie *trie) {$/;"	f
ac_depth	.\libhelper\aho-corasick.h	29;"	d
ac_fail	.\libhelper\aho-corasick.h	31;"	d
ac_is_terminal	.\libhelper\aho-corasick.h	33;"	d
ac_next	.\libhelper\aho-corasick.h	30;"	d
ac_output	.\libhelper\aho-corasick.h	32;"	d
ac_result	.\libhelper\aho-corasick.h	/^struct ac_result {$/;"	s
ac_search	.\libhelper\aho-corasick.c	/^struct ac_result ac_search (struct ac_trie *trie, const char *text, size_t ntext, size_t offset) {$/;"	f
ac_search_longest	.\libhelper\aho-corasick.c	/^struct ac_result ac_search_longest (struct ac_trie *trie, char *text, size_t ntext, size_t offset) {$/;"	f
ac_search_matched	.\libhelper\aho-corasick.c	/^bool ac_search_matched (struct ac_result res) {$/;"	f
ac_state	.\libhelper\aho-corasick.h	/^struct ac_state {$/;"	s
ac_state_add	.\libhelper\aho-corasick.c	/^struct ac_state * ac_state_add (struct ac_state *state, char character) {$/;"	f
ac_state_init	.\libhelper\aho-corasick.c	/^bool ac_state_init (struct ac_state *state) {$/;"	f
ac_trie	.\libhelper\aho-corasick.h	/^struct ac_trie {$/;"	s
ac_trie_init	.\libhelper\aho-corasick.c	/^bool ac_trie_init (struct ac_trie *trie) {$/;"	f
ac_trie_insert	.\libhelper\aho-corasick.c	/^bool ac_trie_insert (struct ac_trie *trie, const char *string) {$/;"	f
assert_ab860c1d54014aaa9428fba0fed60ea6	.\libhelper\assertions.h	2;"	d
bytes_bbbd2074549246cfacce7f2efcea1d5a	.\libhelper\bytes.h	2;"	d
bytes_t	.\libhelper\bytes.h	/^} bytes_t;$/;"	t	typeref:struct:__anon1
checked_add_16	.\libhelper\overflow.h	/^	static inline bool checked_add_16 (int16_t a, int16_t b, int16_t *rp) {$/;"	f
checked_add_32	.\libhelper\overflow.h	/^	static inline bool checked_add_32 (int32_t a, int32_t b, int32_t *rp) {$/;"	f
checked_add_64	.\libhelper\overflow.h	/^	static inline bool checked_add_64 (int64_t a, int64_t b, int64_t *rp) {$/;"	f
cmp	.\libhelper\rbtree.h	/^    int (*cmp) (void *, void *); \/** Comparator establishing a partial order *\/$/;"	m	struct:rb_tree
container_of	.\libhelper\utils.h	7;"	d
crc32	.\libhelper\hash.h	/^static inline uint32_t crc32 (const char * buffer, size_t len) {$/;"	f
crc32tab	.\libhelper\hash.h	/^static const uint32_t crc32tab[] = {$/;"	v
data	.\libhelper\bytes.h	/^	const unsigned char *data;$/;"	m	struct:__anon1
data	.\libhelper\rbtree.h	/^    void *data; \/** XXX How about an intrusive version instead? *\/$/;"	m	struct:rb_node
depth	.\libhelper\aho-corasick.h	/^    size_t depth;$/;"	m	struct:ac_state
dequeue	.\libhelper\queue.h	/^typedef struct dlist dequeue;$/;"	t	typeref:struct:dlist
dequeue	.\libhelper\queue.h	12;"	d
dequeue_data	.\libhelper\queue.h	15;"	d
dequeue_enqueue	.\libhelper\queue.h	17;"	d
dequeue_is_empty	.\libhelper\queue.h	14;"	d
dequeue_peek	.\libhelper\queue.h	16;"	d
dequeue_pop_front	.\libhelper\queue.h	/^dequeue_pop_front (dequeue *queue) {$/;"	f
dequeue_reset	.\libhelper\queue.h	13;"	d
display_ac_trie	.\libhelper-unit-tests\test-material.h	/^void display_ac_trie (struct ac_state *root, std::stringstream &t, char *output, size_t level) {$/;"	f
dlist	.\libhelper\dlist.h	/^struct dlist {$/;"	s
dlist_959d884c829d4e6ca0462bf53af52923	.\libhelper\dlist.h	2;"	d
dlist_delete	.\libhelper\dlist.h	/^static inline void dlist_delete(struct dlist *entry) {$/;"	f
dlist_enqueue	.\libhelper\dlist.h	/^static inline void dlist_enqueue(struct dlist *head, struct dlist *elem) {$/;"	f
dlist_entry	.\libhelper\dlist.h	30;"	d
dlist_for_each	.\libhelper\dlist.h	35;"	d
dlist_for_each_entry_safe	.\libhelper\dlist.h	75;"	d
dlist_for_each_entry_unsafe	.\libhelper\dlist.h	51;"	d
dlist_for_each_previous_entry_safe	.\libhelper\dlist.h	89;"	d
dlist_for_each_previous_entry_unsafe	.\libhelper\dlist.h	62;"	d
dlist_for_each_safe	.\libhelper\dlist.h	40;"	d
dlist_get_next	.\libhelper\dlist.h	32;"	d
dlist_get_prev	.\libhelper\dlist.h	33;"	d
dlist_init	.\libhelper\dlist.h	/^static inline void dlist_init(struct dlist *list) {$/;"	f
dlist_is_empty	.\libhelper\dlist.h	/^static inline bool dlist_is_empty(struct dlist *list) {$/;"	f
dlist_is_last	.\libhelper\dlist.h	/^static inline bool dlist_is_last(struct dlist *entry, struct dlist *head) {$/;"	f
dlist_merge	.\libhelper\dlist.h	/^static inline void dlist_merge(struct dlist *head, struct dlist *list) {$/;"	f
dlist_prepend	.\libhelper\dlist.h	/^static inline void dlist_prepend(struct dlist *head, struct dlist *elem) {$/;"	f
dlist_replace	.\libhelper\dlist.h	/^static inline void dlist_replace(struct dlist *old_entry, struct dlist *new_entry) {$/;"	f
end	.\libhelper\aho-corasick.h	/^	size_t end;$/;"	m	struct:ac_result
failure	.\libhelper\aho-corasick.h	/^    struct ac_state *failure;$/;"	m	struct:ac_state	typeref:struct:ac_state::ac_state
ff_queue_element	.\libhelper\aho-corasick.h	/^struct ff_queue_element {$/;"	s
fnv	.\libhelper\hash.h	/^static inline uint32_t fnv (const char * buffer, size_t len) {$/;"	f
gotofunc	.\libhelper\aho-corasick.h	/^    struct ac_state *gotofunc[256];$/;"	m	struct:ac_state	typeref:struct:ac_state::ac_state
hash_5a6eee6471de4ef08dfc5d54c1b0d2a5	.\libhelper\hash.h	17;"	d
head	.\libhelper\slist.h	/^    void *head;$/;"	m	struct:sl_pair
id	.\libhelper\aho-corasick.h	/^	size_t id;$/;"	m	struct:ac_result
id	.\libhelper\aho-corasick.h	/^    size_t id;$/;"	m	struct:ac_state
inorder	.\libhelper-unit-tests\test-material.h	/^void inorder (struct rb_node* root, size_t d, std::stringstream & out) {$/;"	f
intcmp	.\libhelper-unit-tests\test-material.h	/^int intcmp (void *l, void *r) {$/;"	f
is_red	.\libhelper\rbtree.c	/^bool is_red (struct rb_node *node) {$/;"	f
jenkins	.\libhelper\hash.h	/^static uint32_t jenkins (const char * buffer, size_t len) {$/;"	f
kmp	.\libhelper\kmp.c	/^size_t kmp (const char *haystack, size_t hlen,$/;"	f
kmp_37b632a1d8a24097b7e85fab69ffefe7	.\libhelper\kmp.h	2;"	d
kmp_ff	.\libhelper\kmp.c	/^void kmp_ff (const char *needle, size_t *ff, size_t nff) {$/;"	f
last_state	.\libhelper\aho-corasick.h	/^	struct ac_state *last_state;$/;"	m	struct:ac_result	typeref:struct:ac_result::ac_state
length	.\libhelper\bytes.h	/^	size_t length;$/;"	m	struct:__anon1
levelorder	.\libhelper-unit-tests\test-material.h	/^void levelorder (struct rb_node* root, std::stringstream & out) {$/;"	f
libhelperunittests	.\libhelper-unit-tests\unittest1.cpp	/^namespace libhelperunittests {$/;"	n	file:
list	.\libhelper\aho-corasick.h	/^	dequeue list;$/;"	m	struct:ff_queue_element
main	.\ac-benchmark\ac-benchmark.cpp	/^int main (int argc, char *argv[]) {$/;"	f
memtok	.\libhelper\memtok.c	/^bytes_t memtok (const void * restrict s, size_t length, const char * restrict delim, bytes_t * restrict save_ptr) {$/;"	f
memtok_3b849c5f87bd41179e328e606f06da9c	.\libhelper\memtok.h	2;"	d
mf_assert	.\libhelper\assertions.h	8;"	d
mf_assert_alloc	.\libhelper\assertions.h	18;"	d
mf_assert_fmt	.\libhelper\assertions.h	28;"	d
mf_errno_assert	.\libhelper\assertions.h	38;"	d
murmur	.\libhelper\hash.h	/^static inline uint32_t murmur (const char * buffer, size_t len) {$/;"	f
next	.\libhelper\dlist.h	/^    struct dlist *next, *prev;$/;"	m	struct:dlist	typeref:struct:dlist::dlist
nstates	.\libhelper\aho-corasick.h	/^    size_t nstates;$/;"	m	struct:ac_trie
output	.\libhelper\aho-corasick.h	/^    size_t output;$/;"	m	struct:ac_state
overflow_86c759c767f942429a1473c63a3545b0	.\libhelper\overflow.h	2;"	d
parent	.\libhelper\rbtree.h	/^    struct rb_node *parent;$/;"	m	struct:rb_node	typeref:struct:rb_node::rb_node
preprocessor_8c9e86e0afb24d149a77c00cfb7adfb2	.\libhelper\preprocessor.h	17;"	d
prev	.\libhelper\dlist.h	/^    struct dlist *next, *prev;$/;"	m	struct:dlist	typeref:struct:dlist::
queue_2e4f3b0fa3304dd990755cfa2c99cab1	.\libhelper\queue.h	2;"	d
rb_create_node	.\libhelper\rbtree.c	/^struct rb_node * rb_create_node (void *data) {$/;"	f
rb_destroy	.\libhelper\rbtree.c	/^void rb_destroy (struct rb_tree *tree) {$/;"	f
rb_insert	.\libhelper\rbtree.c	/^void rb_insert (struct rb_tree *tree, void *data) {$/;"	f
rb_insert_node	.\libhelper\rbtree.c	/^struct rb_node * rb_insert_node (struct rb_node *root, void *data, int (*cmp)(void *, void *)) {$/;"	f
rb_invariant	.\libhelper\rbtree.c	/^size_t rb_invariant (struct rb_node *root, int (*cmp)(void *lhs, void *rhs)) {$/;"	f
rb_link	.\libhelper\rbtree.h	/^    struct rb_node *rb_link[2]; \/**< 0 for left, 1 for right - the symmetry here makes the code more concise *\/$/;"	m	struct:rb_node	typeref:struct:rb_node::rb_node
rb_node	.\libhelper\rbtree.h	/^    struct rb_node *rb_node;$/;"	m	struct:rb_tree	typeref:struct:rb_tree::rb_node
rb_node	.\libhelper\rbtree.h	/^struct rb_node {$/;"	s
rb_parent	.\libhelper\rbtree.h	24;"	d
rb_remove	.\libhelper\rbtree.c	/^void rb_remove (struct rb_tree *tree, void *data) {$/;"	f
rb_remove_balance	.\libhelper\rbtree.c	/^struct rb_node * rb_remove_balance (struct rb_node *root, bool right, bool *done) {$/;"	f
rb_remove_node	.\libhelper\rbtree.c	/^struct rb_node * rb_remove_node (struct rb_node *root, void *data, int (*cmp)(void *, void *), bool *done) {$/;"	f
rb_size	.\libhelper\rbtree.c	/^size_t rb_size (struct rb_node *root) {$/;"	f
rb_tree	.\libhelper\rbtree.h	/^struct rb_tree {$/;"	s
rbtree_fcf1f8547f3647ed9a40902d4d7bab54	.\libhelper\rbtree.h	2;"	d
red	.\libhelper\rbtree.h	/^    bool red;$/;"	m	struct:rb_node
restrict	.\libhelper\stdafx.h	8;"	d
root	.\libhelper\aho-corasick.h	/^    struct ac_state *root;$/;"	m	struct:ac_trie	typeref:struct:ac_trie::ac_state
rotate_double	.\libhelper\rbtree.c	/^struct rb_node * rotate_double (struct rb_node *root, bool dir) {$/;"	f
rotate_single	.\libhelper\rbtree.c	/^struct rb_node * rotate_single (struct rb_node *root, bool dir) {$/;"	f
s	.\libhelper\aho-corasick.h	/^	struct ac_state *s;$/;"	m	struct:ff_queue_element	typeref:struct:ff_queue_element::ac_state
sl_pair	.\libhelper\slist.h	/^struct sl_pair {$/;"	s
slist	.\libhelper\slist.h	/^typedef struct sl_pair *slist;$/;"	t	typeref:struct:sl_pair
slist_47409c5cb0da4abeabee5d3f5aad5352	.\libhelper\slist.h	2;"	d
slist_caar	.\libhelper\slist.h	12;"	d
slist_cadr	.\libhelper\slist.h	13;"	d
slist_car	.\libhelper\slist.h	10;"	d
slist_cdar	.\libhelper\slist.h	14;"	d
slist_cddr	.\libhelper\slist.h	15;"	d
slist_cdr	.\libhelper\slist.h	11;"	d
slist_cons	.\libhelper\slist.h	/^static inline slist slist_cons (slist tail, void *head) {$/;"	f
slist_free	.\libhelper\slist.h	/^static inline void slist_free(slist list) {$/;"	f
slist_get_pair	.\libhelper\slist.h	/^static inline void * slist_get_pair (slist pair, size_t index) {$/;"	f
slist_get_tail	.\libhelper\slist.h	/^static inline slist slist_get_tail (slist pair, size_t index) {$/;"	f
slist_head	.\libhelper\slist.h	30;"	d
slist_merge	.\libhelper\slist.h	/^static inline slist slist_merge (slist list1, slist list2, int (*cmp)(void *, void *)) {$/;"	f
slist_pop	.\libhelper\slist.h	/^static inline void * slist_pop(slist *list) {$/;"	f
slist_pop_pair	.\libhelper\slist.h	/^static inline slist slist_pop_pair (slist *list) {$/;"	f
slist_push	.\libhelper\slist.h	/^static inline slist slist_push(slist *list, void *data) {$/;"	f
slist_push_pair	.\libhelper\slist.h	/^static inline slist slist_push_pair(slist *list, slist pair) {$/;"	f
slist_reverse	.\libhelper\slist.h	/^static inline slist slist_reverse (slist list) {$/;"	f
slist_reverse_inplace	.\libhelper\slist.h	/^static inline slist slist_reverse_inplace (slist list) {$/;"	f
slist_sort	.\libhelper\slist.h	/^static inline slist slist_sort (slist list, int (*cmp)(void *, void*)) {$/;"	f
slist_split	.\libhelper\slist.h	/^static inline slist slist_split (slist list) {$/;"	f
slist_tail	.\libhelper\slist.h	31;"	d
start	.\libhelper\aho-corasick.h	/^	size_t start;$/;"	m	struct:ac_result
tail	.\libhelper\slist.h	/^    struct sl_pair *tail;$/;"	m	struct:sl_pair	typeref:struct:sl_pair::sl_pair
terminal	.\libhelper\aho-corasick.h	/^    bool terminal;$/;"	m	struct:ac_state
utils_08b13f277c7649a9acb26c015786d5a7	.\libhelper\utils.h	2;"	d
